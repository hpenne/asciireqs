#!/usr/bin/env python3
"""asciireq-export - Export requirements to CVS format"""

import argparse
import os

import sys

from asciireqs.docparser import read_and_parse_project
import openpyxl


def main() -> None:
    """main - main function"""
    parser = argparse.ArgumentParser(
        description="Get requirements from an asciidoc file"
    )
    parser.add_argument("reqdoc", help="File to parse")
    parser.add_argument("outputpath", help="Path for the output file")
    parser.add_argument(
        "-r",
        "--recursive",
        action="store_true",
        dest="recursive",
        help="Parse specifications recursively and output all requirements",
    )
    args = parser.parse_args()

    extension = os.path.splitext(args.outputpath)[1]
    if extension not in [".cvs", ".xlsx"]:
        sys.exit(
            f"Supported output formats are CVS and XLSX, but {extension} was specified"
        )

    project = read_and_parse_project(args.reqdoc)
    reqs = (
        project.requirements.values()
        if args.recursive
        else project.root_document.reqs.values()
    )

    if extension == ".cvs":
        with open(args.outputpath, "w", encoding="utf-8") as csv_file:
            csv_file.write(",".join(project.root_document.attribute_names))
            csv_file.write("\n")
            for req in reqs:
                csv_file.write(
                    ",".join(
                        req[key] if key in req else ""
                        for key in project.root_document.attribute_names
                    )
                )
                csv_file.write("\n")
    elif extension == ".xlsx":
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(project.root_document.attribute_names)
        for req in reqs:
            ws.append(
                [
                    req[key] if key in req else ""
                    for key in project.root_document.attribute_names
                ]
            )
        wb.save(args.outputpath)
        wb.close()


if __name__ == "__main__":
    main()
